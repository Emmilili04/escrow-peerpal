// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EscrowComplete extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EscrowComplete entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EscrowComplete must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EscrowComplete", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EscrowComplete | null {
    return changetype<EscrowComplete | null>(
      store.get_in_block("EscrowComplete", id.toHexString())
    );
  }

  static load(id: Bytes): EscrowComplete | null {
    return changetype<EscrowComplete | null>(
      store.get("EscrowComplete", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get escrow_buyer(): Bytes {
    let value = this.get("escrow_buyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set escrow_buyer(value: Bytes) {
    this.set("escrow_buyer", Value.fromBytes(value));
  }

  get escrow_seller(): Bytes {
    let value = this.get("escrow_seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set escrow_seller(value: Bytes) {
    this.set("escrow_seller", Value.fromBytes(value));
  }

  get escrow_value(): BigInt {
    let value = this.get("escrow_value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set escrow_value(value: BigInt) {
    this.set("escrow_value", Value.fromBigInt(value));
  }

  get escrow_sellerfee(): BigInt {
    let value = this.get("escrow_sellerfee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set escrow_sellerfee(value: BigInt) {
    this.set("escrow_sellerfee", Value.fromBigInt(value));
  }

  get escrow_buyerfee(): BigInt {
    let value = this.get("escrow_buyerfee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set escrow_buyerfee(value: BigInt) {
    this.set("escrow_buyerfee", Value.fromBigInt(value));
  }

  get escrow_idImage(): string {
    let value = this.get("escrow_idImage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set escrow_idImage(value: string) {
    this.set("escrow_idImage", Value.fromString(value));
  }

  get escrow_currency(): Bytes {
    let value = this.get("escrow_currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set escrow_currency(value: Bytes) {
    this.set("escrow_currency", Value.fromBytes(value));
  }

  get escrow_status(): i32 {
    let value = this.get("escrow_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set escrow_status(value: i32) {
    this.set("escrow_status", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EscrowDeposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EscrowDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EscrowDeposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EscrowDeposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EscrowDeposit | null {
    return changetype<EscrowDeposit | null>(
      store.get_in_block("EscrowDeposit", id.toHexString())
    );
  }

  static load(id: Bytes): EscrowDeposit | null {
    return changetype<EscrowDeposit | null>(
      store.get("EscrowDeposit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get escrow_buyer(): Bytes {
    let value = this.get("escrow_buyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set escrow_buyer(value: Bytes) {
    this.set("escrow_buyer", Value.fromBytes(value));
  }

  get escrow_seller(): Bytes {
    let value = this.get("escrow_seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set escrow_seller(value: Bytes) {
    this.set("escrow_seller", Value.fromBytes(value));
  }

  get escrow_value(): BigInt {
    let value = this.get("escrow_value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set escrow_value(value: BigInt) {
    this.set("escrow_value", Value.fromBigInt(value));
  }

  get escrow_sellerfee(): BigInt {
    let value = this.get("escrow_sellerfee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set escrow_sellerfee(value: BigInt) {
    this.set("escrow_sellerfee", Value.fromBigInt(value));
  }

  get escrow_buyerfee(): BigInt {
    let value = this.get("escrow_buyerfee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set escrow_buyerfee(value: BigInt) {
    this.set("escrow_buyerfee", Value.fromBigInt(value));
  }

  get escrow_idImage(): string {
    let value = this.get("escrow_idImage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set escrow_idImage(value: string) {
    this.set("escrow_idImage", Value.fromString(value));
  }

  get escrow_currency(): Bytes {
    let value = this.get("escrow_currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set escrow_currency(value: Bytes) {
    this.set("escrow_currency", Value.fromBytes(value));
  }

  get escrow_status(): i32 {
    let value = this.get("escrow_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set escrow_status(value: i32) {
    this.set("escrow_status", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EscrowDisputeResolved extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EscrowDisputeResolved entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EscrowDisputeResolved must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EscrowDisputeResolved", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EscrowDisputeResolved | null {
    return changetype<EscrowDisputeResolved | null>(
      store.get_in_block("EscrowDisputeResolved", id.toHexString())
    );
  }

  static load(id: Bytes): EscrowDisputeResolved | null {
    return changetype<EscrowDisputeResolved | null>(
      store.get("EscrowDisputeResolved", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
